//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FoodChapter.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class FoodChapterEntities : DbContext
    {
        public FoodChapterEntities()
            : base("name=FoodChapterEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<ADMIN> ADMINS { get; set; }
        public DbSet<CAKE_CATEGORIES> CAKE_CATEGORIES { get; set; }
        public DbSet<CAKE_CUSTOMIZE_DETAIL> CAKE_CUSTOMIZE_DETAIL { get; set; }
        public DbSet<CAKE_EVENTS> CAKE_EVENTS { get; set; }
        public DbSet<CAKE_FLAVORS> CAKE_FLAVORS { get; set; }
        public DbSet<CAKE_IMAGES> CAKE_IMAGES { get; set; }
        public DbSet<CAKE_TAGS> CAKE_TAGS { get; set; }
        public DbSet<CAKE_TIERS> CAKE_TIERS { get; set; }
        public DbSet<CAKE_TYPES> CAKE_TYPES { get; set; }
        public DbSet<CAKE> CAKES { get; set; }
        public DbSet<CATEGORY> CATEGORies { get; set; }
        public DbSet<EMAIL_DATA> EMAIL_DATA { get; set; }
        public DbSet<EVENT> EVENTS { get; set; }
        public DbSet<FLAVOR> FLAVORs { get; set; }
        public DbSet<INQUIRY> INQUIRies { get; set; }
        public DbSet<INQUIRY_TYPE> INQUIRY_TYPE { get; set; }
        public DbSet<ITEM_TYPES> ITEM_TYPES { get; set; }
        public DbSet<ORDER_DETAILS> ORDER_DETAILS { get; set; }
        public DbSet<ORDER_STATUS> ORDER_STATUS { get; set; }
        public DbSet<ORDER> ORDERS { get; set; }
        public DbSet<PRODUCT_TAGS> PRODUCT_TAGS { get; set; }
        public DbSet<PRODUCT> PRODUCTS { get; set; }
        public DbSet<SUB_CATEGORIES> SUB_CATEGORIES { get; set; }
        public DbSet<USER_TYPES> USER_TYPES { get; set; }
        public DbSet<USER> USERS { get; set; }
        public DbSet<VENDOR_CATEGORIES> VENDOR_CATEGORIES { get; set; }
        public DbSet<VENDOR_REVIEW> VENDOR_REVIEW { get; set; }
        public DbSet<VENDOR> VENDORS { get; set; }
    
        public virtual ObjectResult<SP_GET_VENDOR_DETAILS_Result> SP_GET_VENDOR_DETAILS(Nullable<int> vendorId)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("vendorId", vendorId) :
                new ObjectParameter("vendorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GET_VENDOR_DETAILS_Result>("SP_GET_VENDOR_DETAILS", vendorIdParameter);
        }
    
        public virtual int SP_GET_VENDORS(string key, Nullable<bool> all, Nullable<bool> cake, Nullable<bool> food, Nullable<bool> dessert, Nullable<bool> frozen, Nullable<bool> delivery, Nullable<int> page)
        {
            var keyParameter = key != null ?
                new ObjectParameter("key", key) :
                new ObjectParameter("key", typeof(string));
    
            var allParameter = all.HasValue ?
                new ObjectParameter("all", all) :
                new ObjectParameter("all", typeof(bool));
    
            var cakeParameter = cake.HasValue ?
                new ObjectParameter("cake", cake) :
                new ObjectParameter("cake", typeof(bool));
    
            var foodParameter = food.HasValue ?
                new ObjectParameter("food", food) :
                new ObjectParameter("food", typeof(bool));
    
            var dessertParameter = dessert.HasValue ?
                new ObjectParameter("dessert", dessert) :
                new ObjectParameter("dessert", typeof(bool));
    
            var frozenParameter = frozen.HasValue ?
                new ObjectParameter("frozen", frozen) :
                new ObjectParameter("frozen", typeof(bool));
    
            var deliveryParameter = delivery.HasValue ?
                new ObjectParameter("delivery", delivery) :
                new ObjectParameter("delivery", typeof(bool));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_GET_VENDORS", keyParameter, allParameter, cakeParameter, foodParameter, dessertParameter, frozenParameter, deliveryParameter, pageParameter);
        }
    }
}
